import os
import time
import sqlite3
import logging
from datetime import datetime
from bs4 import BeautifulSoup
import requests
from telegram import Bot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = "8064060634:AAGKtPIvf9R3oZS2dx2bqy0JMhJT_MBUI10"
TELEGRAM_CHANNEL = "@gordep_ru"
DB_NAME = "sent_lots.db"
CHECK_INTERVAL = 1800  # 30 –º–∏–Ω—É—Ç
USER_AGENT = "Mozilla/5.0 (compatible; TorgiGovBot/1.0; +http://example.com/bot)"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS sent_lots (
                id TEXT PRIMARY KEY,
                sent_time TIMESTAMP
            )
        ''')
        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
    finally:
        if 'conn' in locals():
            conn.close()

def get_rss_feed():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ RSS —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏"""
    try:
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π URL –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        url = "https://torgi.gov.ru/new/api/public/lotcards/rss?biddType=ZK"
        
        response = requests.get(
            url,
            headers={'User-Agent': USER_AGENT},
            timeout=10  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
        )
        response.raise_for_status()
        return response.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def parse_rss_feed(xml_content):
    """–ü–∞—Ä—Å–∏–Ω–≥ RSS —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    if not xml_content:
        return []
    
    try:
        soup = BeautifulSoup(xml_content, 'xml')
        return soup.find_all('item')[:5]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –ª–æ—Ç–æ–≤
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return []

# ... (—Ñ—É–Ω–∫—Ü–∏–∏ is_lot_sent, mark_lot_sent –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

def send_to_telegram(title, link, description):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram"""
    try:
        bot = Bot(token=TELEGRAM_TOKEN)
        message = (
            f"üè∑ *{title}*\n\n"
            f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ—Ç]({link})"
        )
        bot.send_message(
            chat_id=TELEGRAM_CHANNEL,
            text=message,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")
        return False

def check_new_lots():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ—Ç–æ–≤...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    xml_content = get_rss_feed()
    items = parse_rss_feed(xml_content)
    
    if not items:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ—Ç—ã")
        return
    
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(items)} –ª–æ—Ç–æ–≤")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ—Ç–æ–≤
    new_lots = 0
    for item in items:
        try:
            lot_id = item.guid.text if item.guid else item.link.text
            if not is_lot_sent(lot_id):
                if send_to_telegram(
                    item.title.text,
                    item.link.text,
                    item.description.text if item.description else ""
                ):
                    mark_lot_sent(lot_id)
                    new_lots += 1
                    time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ—Ç–∞: {e}")
    
    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {new_lots}")

if __name__ == "__main__":
    init_db()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    
    while True:
        try:
            check_new_lots()
            time.sleep(CHECK_INTERVAL)
        except KeyboardInterrupt:
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            time.sleep(300)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
