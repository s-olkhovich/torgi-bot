# compat.py (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ç–æ–º –∂–µ –∫–∞—Ç–∞–ª–æ–≥–µ)
import sys
from types import ModuleType

class FakeCGI(ModuleType):
    def __getattr__(self, name):
        return None

sys.modules['cgi'] = FakeCGI('cgi')

# main.py
import compat  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –∏–º–ø–æ—Ä—Ç–æ–º!
import feedparser
from telegram import Bot
import sqlite3
from datetime import datetime
import time
import logging
import random
import requests
from urllib3.util.retry import Retry
from requests.adapters import HTTPAdapter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = "8064060634:AAGKtPIvf9R3oZS2dx2bqy0JMhJT_MBUI10"
TELEGRAM_CHANNEL = "@gordep_ru"
RSS_URLS = [
    "https://torgi.gov.ru/new/api/public/lotcards/rss?biddType=ZK",
    "https://torgi.gov.ru/opendata/7710349494-torgi/data.rss"
]
DB_NAME = "sent_lots.db"
USER_AGENTS = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)',
    'Mozilla/5.0 (X11; Linux x86_64)'
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
session = requests.Session()
retries = Retry(
    total=3,
    backoff_factor=1,
    status_forcelist=[500, 502, 503, 504, 429]
)
session.mount('https://', HTTPAdapter(max_retries=retries))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def safe_feed_parse(url):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ RSS —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        headers = {'User-Agent': random.choice(USER_AGENTS)}
        response = session.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        return feedparser.parse(response.content)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ RSS: {e}")
        return feedparser.parse("")

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS sent_lots (
                id TEXT PRIMARY KEY,
                sent_time TIMESTAMP
            )
        ''')
        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
    finally:
        if 'conn' in locals():
            conn.close()

def is_lot_sent(lot_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –ª–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"""
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM sent_lots WHERE id=?", (lot_id,))
        return cursor.fetchone() is not None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ—Ç–∞: {e}")
        return True
    finally:
        if 'conn' in locals():
            conn.close()

def mark_lot_sent(lot_id):
    """–ü–æ–º–µ—Ç–∫–∞ –ª–æ—Ç–∞ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ"""
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO sent_lots (id, sent_time) VALUES (?, ?)",
            (lot_id, datetime.now())
        )
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ª–æ—Ç–∞: {e}")
    finally:
        if 'conn' in locals():
            conn.close()

def send_to_telegram(title, link, description):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        bot = Bot(token=TELEGRAM_TOKEN)
        message = (
            f"üè∑ **{title}**\n\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
            f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ—Ç]({link})"
        )
        bot.send_message(
            chat_id=TELEGRAM_CHANNEL,
            text=message,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

def check_new_lots():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤"""
    logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ª–æ—Ç—ã...")
    
    # –ü—Ä–æ–±—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–∏
    for rss_url in RSS_URLS:
        try:
            feed = safe_feed_parse(rss_url)
            if not feed.entries:
                continue
                
            new_lots = 0
            for entry in feed.entries[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –ª–æ—Ç–∞–º–∏
                try:
                    lot_id = entry.get("id", entry.link)
                    if not is_lot_sent(lot_id):
                        if send_to_telegram(
                            entry.title,
                            entry.link,
                            entry.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
                        ):
                            mark_lot_sent(lot_id)
                            new_lots += 1
                            time.sleep(random.uniform(1, 3))  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ—Ç–∞: {e}")
                    continue
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤: {new_lots}")
            return  # –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {rss_url}: {e}")
            continue
    
    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")

if __name__ == "__main__":
    init_db()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    while True:
        try:
            check_new_lots()
            time.sleep(1800)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        except KeyboardInterrupt:
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            time.sleep(300)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
