# compat.py (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª)
import sys
from types import ModuleType

class FakeCGI(ModuleType):
    def __getattr__(self, name):
        return None

sys.modules['cgi'] = FakeCGI('cgi')

# main.py
import feedparser
from telegram import Bot
import sqlite3
from datetime import datetime
import time
import logging
import random
import requests
from urllib3.util.retry import Retry
from requests.adapters import HTTPAdapter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = "8064060634:AAGKtPIvf9R3oZS2dx2bqy0JMhJT_MBUI10"
TELEGRAM_CHANNEL = "@gordep_ru"
DB_NAME = "sent_lots.db"
CHECK_INTERVAL = 3600  # 1 —á–∞—Å –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
REQUEST_DELAY = random.randint(10, 30)  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
RSS_SOURCES = [
    "https://torgi.gov.ru/new/api/public/lotcards/rss?biddType=ZK",
    "https://torgi.gov.ru/opendata/7710349494-torgi/data.rss",
    "https://torgi.gov.ru/opendata/feed"
]

# –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
PROXY_LIST = [
    None,  # –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    {'http': 'http://proxy1.example.com:8080', 'https': 'http://proxy1.example.com:8080'},
    {'http': 'http://proxy2.example.com:8080', 'https': 'http://proxy2.example.com:8080'}
]

USER_AGENTS = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)',
    'Mozilla/5.0 (X11; Linux x86_64)'
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏
session = requests.Session()
retries = Retry(
    total=3,
    backoff_factor=1,
    status_forcelist=[500, 502, 503, 504, 429]
)
session.mount('https://', HTTPAdapter(max_retries=retries))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

def get_random_headers():
    return {
        'User-Agent': random.choice(USER_AGENTS),
        'Accept': 'application/xml',
        'Accept-Language': 'ru-RU,ru;q=0.9',
        'Referer': 'https://torgi.gov.ru/'
    }

def safe_fetch_rss(url):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ RSS —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø—Ä–æ–∫—Å–∏"""
    for proxy in PROXY_LIST:
        try:
            time.sleep(REQUEST_DELAY)
            headers = get_random_headers()
            
            logger.info(f"–ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {proxy}")
            response = session.get(
                url,
                headers=headers,
                proxies=proxy,
                timeout=15
            )
            response.raise_for_status()
            
            return feedparser.parse(response.content)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            continue
    
    logger.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
    return None

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = None
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS sent_lots (
                id TEXT PRIMARY KEY,
                sent_time TIMESTAMP
            )
        ''')
        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}")
    finally:
        if conn:
            conn.close()

def is_lot_sent(lot_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –ª–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ"""
    conn = None
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM sent_lots WHERE id=?", (lot_id,))
        return cursor.fetchone() is not None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ—Ç–∞: {str(e)}")
        return True
    finally:
        if conn:
            conn.close()

def mark_lot_sent(lot_id):
    """–ü–æ–º–µ—Ç–∫–∞ –ª–æ—Ç–∞ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ"""
    conn = None
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO sent_lots (id, sent_time) VALUES (?, ?)",
            (lot_id, datetime.now())
        )
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ª–æ—Ç–∞: {str(e)}")
    finally:
        if conn:
            conn.close()

def send_to_telegram(title, link, description):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        bot = Bot(token=TELEGRAM_TOKEN)
        message = (
            f"üè∑ *{title}*\n\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
            f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ—Ç]({link})"
        )
        bot.send_message(
            chat_id=TELEGRAM_CHANNEL,
            text=message,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        return False

def check_new_lots():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤"""
    logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ—Ç–æ–≤...")
    
    for rss_url in RSS_SOURCES:
        feed = safe_fetch_rss(rss_url)
        if not feed or not feed.entries:
            continue
            
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(feed.entries)} –ª–æ—Ç–æ–≤ –∏–∑ {rss_url}")
        new_lots = 0
        
        for entry in feed.entries[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –ª–æ—Ç–∞–º–∏
            try:
                lot_id = entry.get("id", entry.link)
                if not is_lot_sent(lot_id):
                    if send_to_telegram(
                        entry.title,
                        entry.link,
                        entry.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
                    ):
                        mark_lot_sent(lot_id)
                        new_lots += 1
                        time.sleep(random.uniform(1, 3))  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ—Ç–∞: {str(e)}")
                continue
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤: {new_lots}")
        return
    
    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")

if __name__ == "__main__":
    init_db()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    
    while True:
        try:
            check_new_lots()
            logger.info(f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL//60} –º–∏–Ω—É—Ç")
            time.sleep(CHECK_INTERVAL)
        except KeyboardInterrupt:
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            time.sleep(300)  # –ü–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
