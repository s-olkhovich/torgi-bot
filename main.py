import os
import time
import sqlite3
import logging
from datetime import datetime
from bs4 import BeautifulSoup
import requests
from telegram import Bot

# –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º)
TELEGRAM_TOKEN = "8064060634:AAGKtPIvf9R3oZS2dx2bqy0JMhJT_MBUI10"
TELEGRAM_CHANNEL = "@gordep_ru"
RSS_URL = "https://torgi.gov.ru/new/api/public/lotcards/rss?biddType=ZK"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
DB_NAME = "sent_lots.db"
CHECK_INTERVAL = 1800  # 30 –º–∏–Ω—É—Ç
USER_AGENT = "Mozilla/5.0 (compatible; TorgiGovBot/1.0)"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite"""
    conn = None
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS sent_lots (
                id TEXT PRIMARY KEY,
                sent_time TIMESTAMP
            )
        ''')
        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
    finally:
        if conn:
            conn.close()

def is_lot_sent(lot_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –ª–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ"""
    conn = None
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM sent_lots WHERE id=?", (lot_id,))
        return cursor.fetchone() is not None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ—Ç–∞: {e}")
        return True
    finally:
        if conn:
            conn.close()

def mark_lot_sent(lot_id):
    """–ü–æ–º–µ—Ç–∫–∞ –ª–æ—Ç–∞ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ"""
    conn = None
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO sent_lots (id, sent_time) VALUES (?, ?)",
            (lot_id, datetime.now())
        )
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ª–æ—Ç–∞: {e}")
    finally:
        if conn:
            conn.close()

def send_to_telegram(title, link, description):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        bot = Bot(token=TELEGRAM_TOKEN)
        message = (
            f"üè∑ <b>{title}</b>\n\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
            f"üîó <a href='{link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ—Ç</a>"
        )
        bot.send_message(
            chat_id=TELEGRAM_CHANNEL,
            text=message,
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

def get_rss_feed():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ RSS —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        response = requests.get(
            RSS_URL,
            headers={'User-Agent': USER_AGENT},
            timeout=15
        )
        response.raise_for_status()
        return response.content
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ RSS: {e}")
        return None

def parse_rss_feed(xml_content):
    """–ü–∞—Ä—Å–∏–Ω–≥ RSS –ª–µ–Ω—Ç—ã"""
    if not xml_content:
        return []
    
    try:
        soup = BeautifulSoup(xml_content, 'xml')
        return soup.find_all('item')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS: {e}")
        return []

def check_new_lots():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ—Ç–æ–≤"""
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º RSS
    xml_content = get_rss_feed()
    items = parse_rss_feed(xml_content)
    
    if not items:
        logger.warning("–õ–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        return
    
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤: {len(items)}")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É
    new_lots = 0
    for item in items[:10]:  # –ù–µ –±–æ–ª–µ–µ 10 –∑–∞ —Ä–∞–∑
        try:
            lot_id = item.guid.text if item.guid else item.link.text
            if not is_lot_sent(lot_id):
                title = item.title.text if item.title else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                link = item.link.text if item.link else "#"
                description = item.description.text if item.description else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
                
                if send_to_telegram(title, link, description):
                    mark_lot_sent(lot_id)
                    new_lots += 1
                    time.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ—Ç–∞: {e}")
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤: {new_lots}")

if __name__ == "__main__":
    init_db()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:")
    logger.info(f"Telegram –∫–∞–Ω–∞–ª: {TELEGRAM_CHANNEL}")
    logger.info(f"RSS URL: {RSS_URL}")
    
    while True:
        try:
            check_new_lots()
            time.sleep(CHECK_INTERVAL)
        except KeyboardInterrupt:
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            time.sleep(300)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
